{
	"name": "RegisterONNXModel",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkPoolMedium",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2
		},
		"metadata": {
			"kernelspec": {
				"name": "python3",
				"display_name": "Python 3"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/051ddeca-1ed6-4d8b-ba6f-1ff561e5f3b3/resourceGroups/chaxu-test/providers/Microsoft.Synapse/workspaces/chaxueus2/bigDataPools/sparkPoolMedium",
				"name": "sparkPoolMedium",
				"type": "Spark",
				"endpoint": "https://chaxueus2.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkPoolMedium",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"gather": {
						"logged": 1603687117552
					},
					"collapsed": true
				},
				"source": [
					"import azureml.core\n",
					"\n",
					"from azureml.core.experiment import Experiment\n",
					"from azureml.core.workspace import Workspace\n",
					"from azureml.train.automl.run import AutoMLRun\n",
					"\n",
					"subscription_id = \"051ddeca-1ed6-4d8b-ba6f-1ff561e5f3b3\"\n",
					"resource_group = \"chaxu-test\"\n",
					"workspace_name = \"chaxuamleus\"\n",
					"experiment_name = \"nyc_taxi_automl_run1\"\n",
					"\n",
					"ws = Workspace(subscription_id = subscription_id, resource_group = resource_group, workspace_name = workspace_name)\n",
					"experiment=Experiment(ws, experiment_name)\n",
					"run = AutoMLRun(experiment, run_id = \"AutoML_a0379ffb-1905-4009-817e-b2bc36806d71\")\n",
					"\n",
					"import time\n",
					"time.sleep(3600)\n",
					"\n",
					"import onnxruntime\n",
					"import mlflow\n",
					"import mlflow.onnx\n",
					"\n",
					"from mlflow.models.signature import ModelSignature\n",
					"from mlflow.types import DataType\n",
					"from mlflow.types.schema import ColSpec, Schema\n",
					"from mlflow.models.signature import infer_signature\n",
					"\n",
					"# Get best model from automl run\n",
					"best_run, onnx_model = run.get_output(return_onnx_model=True)\n",
					"\n",
					"# Define utility function to infer the schema of ONNX model\n",
					"def _infer_schema(data):\n",
					"    res = []\n",
					"    for _, col in enumerate(data):\n",
					"        t = col.type.replace('tensor(', '').replace(')', '')\n",
					"        if t in ['bool']:\n",
					"            dt = DataType.boolean\n",
					"        elif t in [\"int8\", \"uint8\", \"int16\", \"uint16\", \"int32\"]:\n",
					"            dt = DateType.integer\n",
					"        elif t in [\"uint32\", \"int64\"]:\n",
					"            dt = DataType.long\n",
					"        elif t in [\"float16\", \"bfloat16\", \"float\"]:\n",
					"            dt = DataType.float\n",
					"        elif t in [\"double\"]:\n",
					"            dt = DataType.double\n",
					"        elif t in [\"string\"]:\n",
					"            dt = DataType.string\n",
					"        else:\n",
					"            raise Exception(\"Unsupported type: \" + t)\n",
					"        res.append(ColSpec(type=dt, name=col.name))\n",
					"    return Schema(res)\n",
					"\n",
					"def _infer_signature(onnx_model):\n",
					"    onnx_model_bytes = onnx_model.SerializeToString()\n",
					"    onnx_runtime = onnxruntime.InferenceSession(onnx_model_bytes)\n",
					"    inputs = _infer_schema(onnx_runtime.get_inputs())\n",
					"    outputs = _infer_schema(onnx_runtime.get_outputs())\n",
					"    return ModelSignature(inputs, outputs)\n",
					"\n",
					"# Infer signature of ONNX model\n",
					"signature = _infer_signature(onnx_model)\n",
					"\n",
					"artifact_path = experiment_name + '_artifact'\n",
					"\n",
					"mlflow.set_tracking_uri(ws.get_mlflow_tracking_uri())\n",
					"mlflow.set_experiment(experiment_name)\n",
					"\n",
					"with mlflow.start_run() as run:\n",
					"    # Save the model to the outputs directory for capture\n",
					"    mlflow.onnx.log_model(onnx_model, artifact_path, signature=signature)\n",
					"\n",
					"    # Register the model to AML model registry\n",
					"    mlflow.register_model('runs:/' + run.info.run_id + '/' + artifact_path, 'model_name')"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"gather": {
						"logged": 1603687138853
					}
				},
				"source": [
					""
				],
				"attachments": null,
				"execution_count": 6
			}
		]
	}
}